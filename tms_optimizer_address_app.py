# tms_optimizer_address_app.py
"""
TMS Route Optimizer (address input)
- Input: warehouse + list of addresses (no lat/lon needed)
- Auto geocode via OpenStreetMap (Nominatim)
- Optimize route using OR-Tools (if available) or Nearest Neighbor
"""

import streamlit as st
import pandas as pd
import numpy as np
import math
import time
from geopy.geocoders import Nominatim

try:
    from ortools.constraint_solver import routing_enums_pb2
    from ortools.constraint_solver import pywrapcp
    ORTOOLS_AVAILABLE = True
except Exception:
    ORTOOLS_AVAILABLE = False

# ---------- CONFIG ----------
st.set_page_config(page_title="TMS T·ªëi ∆∞u tuy·∫øn ƒë∆∞·ªùng (Address)", layout="wide")
st.title("üöö ·ª®ng d·ª•ng TMS t·ªëi ∆∞u h√≥a tuy·∫øn ƒë∆∞·ªùng theo ƒë·ªãa ch·ªâ")

geolocator = Nominatim(user_agent="tms_app")

# ---------- HELPER ----------
def haversine(lat1, lon1, lat2, lon2):
    R = 6371
    dlat = math.radians(lat2-lat1)
    dlon = math.radians(lon2-lon1)
    a = (math.sin(dlat/2)**2 +
         math.cos(math.radians(lat1)) *
         math.cos(math.radians(lat2)) *
         math.sin(dlon/2)**2)
    return R * 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))

def geocode_address(address):
    """
    Geocode ƒë·ªãa ch·ªâ (∆∞u ti√™n ƒë·ªãa ch·ªâ Vi·ªát Nam)
    - Th·ª≠ t·ªëi ƒëa 3 l·∫ßn
    - T·ª± ƒë·ªông th√™m ", Vi·ªát Nam" ho·∫∑c ", TP H·ªì Ch√≠ Minh, Vi·ªát Nam" n·∫øu c·∫ßn
    """
    for attempt in range(3):
        try:
            if attempt == 0:
                query = address
            elif attempt == 1:
                query = address + ", Vi·ªát Nam"
            else:
                query = address + ", TP H·ªì Ch√≠ Minh, Vi·ªát Nam"

            location = geolocator.geocode(query, timeout=10)
            if location:
                return location.latitude, location.longitude

        except Exception as e:
            # t·∫°m ngh·ªâ gi·ªØa c√°c l·∫ßn th·ª≠ (ƒë·ªÉ tr√°nh b·ªã gi·ªõi h·∫°n)
            time.sleep(1)

    return None, None


def compute_distance_matrix(coords):
    n = len(coords)
    dist = [[0]*n for _ in range(n)]
    for i in range(n):
        for j in range(n):
            if i != j:
                dist[i][j] = int(haversine(coords[i][0], coords[i][1],
                                           coords[j][0], coords[j][1]) * 1000)
    return dist

def solve_with_ortools(distance_matrix):
    n = len(distance_matrix)
    manager = pywrapcp.RoutingIndexManager(n, 1, 0)
    routing = pywrapcp.RoutingModel(manager)

    def distance_callback(from_index, to_index):
        f, t = manager.IndexToNode(from_index), manager.IndexToNode(to_index)
        return distance_matrix[f][t]

    transit_callback_index = routing.RegisterTransitCallback(distance_callback)
    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)

    params = pywrapcp.DefaultRoutingSearchParameters()
    params.first_solution_strategy = routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC
    params.time_limit.seconds = 5

    solution = routing.SolveWithParameters(params)
    if not solution:
        return None, None

    index = routing.Start(0)
    route = []
    while not routing.IsEnd(index):
        route.append(manager.IndexToNode(index))
        index = solution.Value(routing.NextVar(index))
    route.append(manager.IndexToNode(index))

    total_distance = 0
    for i in range(len(route)-1):
        total_distance += distance_matrix[route[i]][route[i+1]]
    return route, total_distance

def nearest_neighbor(distance_matrix):
    n = len(distance_matrix)
    visited = [False]*n
    route = [0]
    visited[0] = True
    total = 0
    current = 0
    for _ in range(n-1):
        next_node = None
        min_d = float('inf')
        for j in range(n):
            if not visited[j] and distance_matrix[current][j] < min_d:
                min_d = distance_matrix[current][j]
                next_node = j
        if next_node is None:
            break
        route.append(next_node)
        total += min_d
        visited[next_node] = True
        current = next_node
    route.append(0)
    total += distance_matrix[current][0]
    return route, total

# ---------- INPUT ----------
with st.sidebar:
    st.header("‚öôÔ∏è C·∫•u h√¨nh")
    avg_speed = st.number_input("T·ªëc ƒë·ªô trung b√¨nh (km/h)", 5.0, 120.0, 30.0)
    allow_return = st.checkbox("Tr·ªü l·∫°i kho cu·ªëi chuy·∫øn", value=True)

st.subheader("1Ô∏è‚É£ Nh·∫≠p ƒë·ªãa ch·ªâ kho")
warehouse_address = st.text_input("ƒê·ªãa ch·ªâ kho", "285 C√°ch M·∫°ng Th√°ng 8, Qu·∫≠n 10, TP.HCM")

st.subheader("2Ô∏è‚É£ Danh s√°ch ƒëi·ªÉm giao h√†ng")
sample = """Kh√°ch A - 43 Nguy·ªÖn Hu·ªá, Qu·∫≠n 1, TP.HCM
Kh√°ch B - 1 L√™ Du·∫©n, Qu·∫≠n 1, TP.HCM
Kh√°ch C - 60 L√Ω T·ª± Tr·ªçng, Qu·∫≠n 1, TP.HCM
Kh√°ch D - 500 ƒêi·ªán Bi√™n Ph·ªß, Qu·∫≠n 3, TP.HCM"""
addresses_text = st.text_area("Nh·∫≠p m·ªói ƒë·ªãa ch·ªâ 1 d√≤ng", sample, height=150)

if st.button("üß≠ Geocode & T·ªëi ∆∞u h√≥a tuy·∫øn"):
    st.info("ƒêang x·ª≠ l√Ω geocoding... (s·∫Ω m·∫•t v√†i gi√¢y)")

    addresses = [a.strip() for a in addresses_text.splitlines() if a.strip()]
    all_points = [warehouse_address] + addresses
    names = ["Kho"] + [f"ƒêi·ªÉm {i+1}" for i in range(len(addresses))]

    coords = []
    for i, addr in enumerate(all_points):
        lat, lon = geocode_address(addr)
        if lat is None:
            st.error(f"‚ùå Kh√¥ng t√¨m th·∫•y t·ªça ƒë·ªô cho: {addr}")
            st.stop()
        coords.append((lat, lon))
        st.write(f"‚úÖ {names[i]} ‚Üí ({lat:.5f}, {lon:.5f})")
        time.sleep(1)  # tr√°nh gi·ªõi h·∫°n API

    st.success("‚úÖ Geocoding ho√†n t·∫•t!")

    # Distance matrix
    dist_matrix = compute_distance_matrix(coords)

    # Optimize
    with st.spinner("ƒêang t·ªëi ∆∞u h√≥a tuy·∫øn..."):
        if ORTOOLS_AVAILABLE:
            route, total = solve_with_ortools(dist_matrix)
        else:
            route, total = nearest_neighbor(dist_matrix)

    if route is None:
        st.error("Kh√¥ng t√¨m ƒë∆∞·ª£c l·ªùi gi·∫£i t·ªëi ∆∞u.")
        st.stop()

    if not allow_return and route[-1] == 0:
        route = route[:-1]

    # Build results
    total_km = total / 1000
    time_h = total_km / avg_speed
    st.success(f"T·ªïng qu√£ng ƒë∆∞·ªùng: **{total_km:.2f} km**, Th·ªùi gian ∆∞·ªõc t√≠nh: **{time_h:.2f} gi·ªù**")

    route_names = [names[i] for i in route]
    st.write("**Th·ª© t·ª± tuy·∫øn:**")
    st.write(" ‚Üí ".join(route_names))

    df_result = pd.DataFrame({
        "Th·ª© t·ª±": list(range(1, len(route)+1)),
        "T√™n": [names[i] for i in route],
        "ƒê·ªãa ch·ªâ": [all_points[i] for i in route],
        "Lat": [coords[i][0] for i in route],
        "Lon": [coords[i][1] for i in route],
    })
    st.dataframe(df_result)

    # Map visualization
    import pydeck as pdk
    points = [{"lat": c[0], "lon": c[1], "name": names[i]} for i, c in enumerate(coords)]
    path = [{"path": [(coords[i][1], coords[i][0]) for i in route]}]
    view = pdk.ViewState(latitude=np.mean([c[0] for c in coords]),
                         longitude=np.mean([c[1] for c in coords]),
                         zoom=12)
    layer_route = pdk.Layer("PathLayer", path, get_path="path", get_width=4, width_scale=20, get_color=[0, 128, 255])
    layer_points = pdk.Layer("ScatterplotLayer", points, get_position=["lon","lat"], get_radius=80,
                             get_fill_color=[255, 128, 0], pickable=True)
    r = pdk.Deck(layers=[layer_route, layer_points], initial_view_state=view, tooltip={"text": "{name}"})
    st.pydeck_chart(r)

    st.download_button("‚¨áÔ∏è T·∫£i k·∫øt qu·∫£ CSV", df_result.to_csv(index=False).encode("utf-8"),
                       "route_result.csv", "text/csv")

st.caption("üí° L∆∞u √Ω: geocoding d√πng d·ªØ li·ªáu OpenStreetMap (Nominatim) mi·ªÖn ph√≠, c√≥ th·ªÉ ch·∫≠m ho·∫∑c gi·ªõi h·∫°n ~1 truy v·∫•n/gi√¢y.")

